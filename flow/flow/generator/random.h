
/**
 * \cond LICENSE
 * The MIT License (MIT)
 * 
 * Copyright (c) 2015 Taras Mychaskiw
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * \endcond
 */
 
#ifndef FLOW_GENERATOR_RANDOM_H
#define FLOW_GENERATOR_RANDOM_H

#include <random>
#include <functional>

#include "generate.h"

namespace flow {
    namespace generator {

/// <summary>
/// Creates an infinite stream of random numbers generated by <paramref name="rng"/>.
/// <para>By default, a <c>std::default_random_engine</c> with the default seed is used.</para>
/// </summary>
/// <param name="rng">The random number generator engine, from the <c>&lt;random&gt;</c> header.</param>
/// <returns>An infinite stream of random numbers generated by <paramref name="rng"/>.</returns>
template <typename Engine = std::default_random_engine>
auto random_engine(Engine rng = Engine()) {
    return generate(std::bind(&Engine::operator(), rng));
}

/// <summary>
/// Creates an infinite stream of random numbers which follow <paramref name="distribution"/>.
/// <para>The source of randomness used is <paramref name="rng"/>, which by default is a <c>std::default_random_engine</c>
/// with the default seed.</para>
/// </summary>
/// <param name="distribution">The distribution the random numbers will follow, from the <c>&lt;random&gt;</c> header.</param>
/// <param name="rng">The random number generator engine, from the <c>&lt;random&gt;</c> header.</param>
/// <returns>An infinite stream of random numbers generated by <paramref name="rng"/> following <paramref name="distribution"/>.</returns>
template <typename Distribution, typename Engine = std::default_random_engine>
auto random_distribution(Distribution distribution, Engine rng = Engine()) {
    return generate(std::bind(distribution, rng));
}

/// <summary>
/// Creates an infinite stream of uniform random integers in the range <c>[lower, upper]</c>, including <paramref name="upper"/>.
/// <para>The source of randomness used is <paramref name="rng"/>, which by default is a <c>std::default_random_engine</c>
/// with the default seed.</para>
/// </summary>
/// <param name="lower">The lower bound of integers to produce.</param>
/// <param name="upper">The upper bound of integers to produce, inclusive.</param>
/// <param name="rng">The random number generator engine, from the <c>&lt;random&gt;</c> header.</param>
/// <returns>An infinite stream of random integers in the range <c>[lower, upper]</c>, including <paramref name="upper"/>.</returns>
template <typename T, typename U, typename Engine = std::default_random_engine, typename = std::enable_if_t<std::is_integral<T>::value>>
auto random_ints(T&& lower, U&& upper, Engine rng = Engine()) {
    return random_distribution(std::uniform_int_distribution<T>(std::forward<T>(lower), std::forward<U>(upper)), rng);
}

/// <summary>
/// Creates an infinite stream of uniform random real values in the range <c>[lower, upper)</c>, excluding <paramref name="upper"/>.
/// <para>The source of randomness used is <paramref name="rng"/>, which by default is a <c>std::default_random_engine</c>
/// with the default seed.</para>
/// </summary>
/// <param name="lower">The lower bound of integers to produce.</param>
/// <param name="upper">The upper bound of integers to produce, exclusive.</param>
/// <param name="rng">The random number generator engine, from the <c>&lt;random&gt;</c> header.</param>
/// <returns>An infinite stream of random real values in the range <c>[lower, upper)</c>, excluding <paramref name="upper"/>.</returns>
template <typename T, typename U, typename Engine = std::default_random_engine, typename = std::enable_if_t<std::is_floating_point<T>::value && std::is_floating_point<U>::value>>
auto random_reals(T&& lower, U&& upper, Engine rng = Engine()) {
    return random_distribution(std::uniform_real_distribution<T>(std::forward<T>(lower), std::forward<U>(upper)), rng);
}

/// <summary>
/// Creates an infinite stream of uniform random boolean values.
/// <para>The source of randomness used is <paramref name="rng"/>, which by default is a <c>std::default_random_engine</c>
/// with the default seed.</para>
/// </summary>
/// <param name="rng">The random number generator engine, from the <c>&lt;random&gt;</c> header.</param>
/// <returns>An infinite stream of random boolean values.</returns>
template <typename Engine = std::default_random_engine>
auto random_bools(Engine rng = Engine()) {
    return random_distribution(std::bernoulli_distribution(0.5), rng);
}
    }
}
#endif
