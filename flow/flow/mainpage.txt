
/// \mainpage
/// Sick Flow, Bro
/// ==============
/// <para>Inspired by Java 8 [Streams](http://www.oracle.com/technetwork/articles/java/ma14-java-se-8-streams-2177646.html),
/// flow is a C++14 library that provides lazy evaluation and functional transformations on data. It's like Haskell for C++.
/// The library provides many common data transformations, such as map, filter and fold, as well as other commonly used
/// operations like computing the sum, min and max or simply counting the number or elements. And all of it is packaged
/// in a nice, easy to read and understand syntax. To use, simply <c>\#include &lt;flow.h&gt;</c> in your C++14 program.
/// With fully optimized code, flow offers minimal performance penalties compared to
/// standard code, so there's no reason not to love.</para>
/// 
/// What is a Sick Flow?
/// --------------------
/// <para>A flow is usually called a stream. But if I called the library "Stream" I couldn't say "sick flow" all the time.
/// I'll use flow and stream interchangeably, just know that a stream is a forward, single-pass source of data, data that
/// you would want to do things with.</para>
/// 
/// Creating a Sick Flow
/// --------------------
/// <para>The flow::generator namespace contains several factory methods for creating a Stream object. Probably the most
/// common generator used is from(), which creates a Stream from an iterator range or a container.</para>
/// \code{.cpp}auto stream = from(my_vector); // a stream over the entire vector in the same order \endcode
/// <para>Since it's very common, the pipe operator is overloaded for container types as a shorthand for from(). So the following
/// statements create and process the same stream.</para>
/// \code{.cpp}from(my_vector) | each(process);    // process each vector element
/// my_vector | each(process);          // shorthand, the same operation as above   \endcode
/// <para>Other common stream generators are iota(), which counts up from a value, repeat(), which repeats a value or
/// cycle(), which cycles a container.</para>
/// 
/// Manipulating a Sick Flow
/// ------------------------
/// <para>Say you want to loop through a list of numbers. But you only want the even values. Then you want the squares of those
/// values for some reason. Oh, and you want at most 10 of those. How would you do that in normal C++? Probably something like</para>
/// \code{.cpp}int count = 0;
/// for (auto it = list.begin(), end = list.end(); it != end & count < 10; ++it) {
///     if (*it % 2 == 0) {
///         ++count;
///         process(*it * *it);
///     }
/// }\endcode
/// 
/// <para>Not bad, but it's not quickly clear what is going on. The same operation can be done as a sick flow instead:</para>
/// \code{.cpp}list | filter([](int i) { return i % 2 == 0; }) | limit(10) | map([](int i) { return i*i; }) | each(process);\endcode
/// 
/// <para>Reading the line aloud, it's obvious what is happening. Take the list, keep even values, limit it to 10 elements,
/// map the elements to their square, and then process each of those. Fun. This is just a trivial example, there many other
/// stream operations available to be used.</para>
/// 
/// <para>Stream operations are broken down into two main types: Intermediate and Terminal operations. Intermediate operations
/// transform a stream into another stream. We saw three examples above in <c>filter</c>, <c>limit</c> and <c>map</c>. Intermediate
/// operations are meaningless without some sort of terminal operation, such as <c>each</c> or <c>count</c>. Terminal operations
/// do something with the final stream data, be it summing, counting, calling a function, finding the min, and so on.</para>
/// <para>Intermediate operations are all inside the flow::intermediate namespace.<br/>Terminal operations are all inside the
/// flow::terminal namespace.</para>
/// 
/// ### A Word on the flow namespace
/// <para>All of the functions in flow::generator, flow::intermediate and flow::terminal are aliased to also be in the flow namespace.
/// For your program, if you do <c>using namespace flow;</c> (if you want), you get access to all the core parts of the flow library.
/// If not, you can still just write <c>flow::map</c> instead of <c>flow::intermediate::map</c>.</para>
/// 
/// ### Documentation at a Glance
/// <para>To get started, take some time to look at the [Readme](df/d5b/readme.html).</para>
/// <para>The best way to view all available functions, use the [Namespace Members](namespacemembers_func.html) page. It lists
/// every important function and the namespace it sits in, indicating whether it is a generator, or an intermediate or terminal operation.</para>
///
/// \author Taras Mychaskiw
/// \version 1.0.1
/// \date November 2015
/// \copyright MIT License
///


/// \namespace flow
/// The entire flow library is contained in the flow namespace.
/// <para>The flow library provides lazy evaluated, functional style transformations on data, allowing
/// for complex operations to be written in a clean, easy to understand and maintainable way. This
/// functionality is provided by the Stream class, coupled with stream operators.
/// Two types of stream operators exist: intermediate and terminal operations.</para>
/// <para>Intermediate operations take a stream as input and produce a new stream. Intermediate
/// operations are lazily evaluated -- the stream is not evaluated until a value is required -- however
/// some are <em>stateful</em> and require the entire stream to evaluated up front before the operation can be applied.
/// Stateful operations also require an additional <c>O(n)</c> space, where <c>n</c> is the size of the stream,
/// whereas <em>stateless</em> operations only require <c>O(1)</c> space. In the documentation, all intermediate
/// operations are stateless unless noted otherwise.</para>
/// <para>Terminal operations take a stream as input and produce a non-stream output. The exact output depends on the
/// operation, it could be a stream element, a combination of stream elements (such as a sum), or maybe a <c>bool</c>.
/// As with intermediate operations, terminal operations are lazily evaluated.
/// After a terminal operation is applied to a stream, the stream is invalided. Using the stream afterwards
/// results in undefined behavior.</para>
/// <para>These operations are useless without an actual Stream. A Stream object can be obtained using a generator --
/// a factory method that gives you a Stream. All generators are also lazily evaluated.</para>
/// \li flow::generator contains the stream generators.
/// \li flow::intermediate contains intermediate operations.
/// \li flow::terminal contains terminal operations.
/// <para>Note that the operations are split into separate namespaces for organizational purposes, but all operations
/// are aliased to be in the flow namespace as well. If you want to, <c>using namespace flow;</c> will give you access
/// to the entire flow library. Otherwise, you only need to write flow::map, not flow::intermediate::map.</para>
/// 
/// Operating on a Stream
/// ---------------------
/// <para>All intermediate and terminal operations can be applied to a stream using <c>operator|</c>.</para>
/// \code{.cpp}optional<int> val = intstream | max();   // apply the `max` terminal to `intstream`\endcode
/// <para>Since intermediate operations return a new stream, operations can be chained together in interesting ways.</para>
/// \code{.cpp}int sum_squares = intstream | map([](int i) { return i * i; }) | sum();\endcode
/// <para>You can also create new operations from existing ones and apply those to streams. The type of operation
/// you create is the same as the last operation you combine.</para>
/// \code{.cpp}auto square_sum = map([](int i) { return i * i; }) | sum();  // square and sum; a terminal operation
/// auto add2_evens = filter([](int i) { return i % 2 == 0; }) | map([](int i) { return i + 2; });  // keep only even values, add 2 to them; an intermediate operation
/// optional<int> val = intstream | add2_evens | square_sum;     // does exactly what you think it does \endcode
/// <para>Terminal operators also have a method <c>then()</c>, which takes a function that uses the value produced
/// and produces a new terminal which composes the operations. For example, this method is used internally by none(),
/// a terminal that returns <c>true</c> if none of the stream elements match a predicate. Logically, this is the same
/// as finding if any of the elements match the predicate, then negating the result -- this is exactly what is done.</para>
/// \code{.cpp}auto my_none = any(my_predicate).then(std::logical_not<bool>());\endcode
/// <para>There are more helper functions built into terminal operations which allow you to immediately access the returned
/// optional value if it exists, or execute a function if the value exists, etc. Read more about these operations in the
/// flow::terminal namespace.</para>
/// 
/// \todo Java uses stream&lt;T&gt; instead of stream&lt;source&gt;. This makes it easier to return streams
/// or pass streams around, or have method that return streams or whatever. Currently, a function like below is not generally possible.
/// \code{.cpp}auto get_stream(T& t) {
///     return some_property(t) ? cycle(t, 2) : from(t);
/// }\endcode
/// Perhaps this way is actually better. Embedding the template allows for better optimizations to occur, but it makes the
/// stream type convoluted. It literally always is "a stream of ints" regardless of how many operations are in the source.
/// The only way I can think of to allow stream&lt;T&gt; to exist would be through the use of an abstract base source class,
/// and each source has a pointer to the source before it in the pipeline. This involves heavy use of virtual methods -
/// essentially every function call would need to be virtual. It would also allow for recursively defined streams though.
/// \todo <c>constexpr</c> everything - will need to wait for constexpr lambdas realistically
///


/// \namespace flow::generator
/// Factory methods to create stream objects, all of which are also aliased in the flow namespace.
/// <para>The functions in the flow::generator namespace all produce Stream objects.</para>
/// <para>Also defines <c>operator|</c> for container types to be a shorthand for from().
/// A container is defined to be any class with a <c>const_iterator</c> inner class and for which
/// <c>std::begin</c> and <c>std::end</c> have overloads. (This excludes C-style arrays -- use <c>std::array</c> already!)</para>
///
/// \todo parallel_*() - create a parallel version of other generators?
/// 

/// \namespace flow::terminal
/// Terminal operations, all of which are also aliased in the flow namespace.
/// <para>The functions in the flow::terminal namespace all produce a terminal operation. The terminal
/// operation does not operate on a stream until the pipe <c>operator|</c> has been applied, after which
/// the stream is evaluated and the terminal's return value is calculated. After applying a terminal
/// operation, the stream is left in an unusable state as it has been iterated through.</para>
/// <para>As an alternative to using terminal operations to iterate through a stream, you can use streams iterators or use Java-like iteration.
/// More information is available in the Stream class documentation.</para>
/// <para>Some terminal operations (such as min()) return an \ref optional object when the stream is empty.
/// This method was chosen over throwing an exception, though there is no clear better way. In the end,
/// flow uses the optional class for the following reasons:</para>
/// <ul>
///     <li>In the exceptional case, a boolean check is much faster than an exception.</li>
///     <li>In many cases, you will know for sure that the optional returned contains a value and the boolean check
///         can be skipped anyways. Consider that many of the STL algorithms return iterators which are commonly dereferenced without
///         checking them for validity.</li>
///     <li>In other cases, when you don't know for sure if a value would exist, a boolean check only carries a very slight overhead.</li>
///     <li>It is less code on the user end which is always nice.</li>
/// </ul>
/// <para>Some convenience methods are available to terminal operations:</para>
/// \code{.cpp}Terminal<F> then(F f);      // a terminal which applies f to the result of this terminal
/// Terminal<?> value();        // a terminal which directly accesses the optional's contained value, undefined if the optional has no value
/// Terminal<?> value_or(U&&);  // a terminal which directly calls optional::value_or
/// Terminal<?> if_then(F f, G g = [](){}); // a terminal which applies f to the contained optional value if it is present, otherwise g is applied \endcode
/// <para>Examples of these operations are available in \ref terminal.cpp.</para>
///
/// \todo parallel_*() - chunking parallelization of terminal operations
/// \todo parallel pipelining of stream operations?
/// \todo equals - check if two streams are equal
/// \todo find - filter(equal to) | first(); optional parameter to return if filtered stream is empty
/// \todo is_sorted - check if a stream is sorted by a comparator
/// \todo overload comparison operators between streams?
/// \todo custom - (is this better than each() with capture?)
///     allow users to create their own terminal operations; useful to ensure signature takes a <c>Stream<Source>&&</c>
/// \code{.cpp}template <typename T> struct correct : public correct<decltype(&T::operator())> { }; // capture lambda
/// // true types
/// template <typename R, typename C, typename Src> struct correct<R(C::*)(Stream<Src>&&)> : std::true_type { };    // capture class functions
/// template <typename R, typename Src> struct correct<R(Stream<Src>&&)> : std::true_type { };                      // capture functions
/// // false types
/// template <typename R, typename... Args> struct correct<R(Args...)> : std::false_type { };
/// template <typename R, typename C, typename... Args> struct correct<R(C::*)(Args...)> : std::false_type { }; \endcode
/// 

/// \namespace flow::intermediate
/// Intermediate operations, all of which are also aliased in the flow namespace.
/// <para>The functions in the flow::intermediate namespace all produce an intermediate operation. The
/// intermediate operation does not operate on a stream until the pipe <c>operator|</c> has been applied,
/// including stateful operations. Only after being applied to a stream is the new stream created.</para>
///
/// \todo group the stream, [1,2,3,4,5] with group<2> -> [(1,2), (3,4)]
/// \todo moving window into the stream, [1,2,3] with window<2> -> [(1,2), (2,3)]
/// \todo adjacent_diff - from &lt;numeric&gt;
/// \todo partial_sum - from &lt;numeric&gt;
/// \todo overload arithmetic operators as map operations?
/// 

/// \namespace std
/// Overload <c>operator&lt;&lt;</c> for <c>std::tuple</c> and <c>std::pair</c>.
/// <para>Defines <c>operator&lt;&lt;</c> for <c>std::tuple</c> and <c>std::pair</c>. This definition is required by dump() for a stream
/// containing these types, such as a stream that uses the default zip() operation. For example,</para>
/// \code{.cpp}intstream | zip(more_ints) | dump(); // requires std::operator<< for tuples \endcode
/// <para>The <c>std</c> namespace can be removed by defining <c>\#define FLOW_PRINTTUPLE_NO_STD</c> before including <c>flow.h</c>.</para>
/// \code{.cpp}// remove std::operator<< for tuples and pairs
/// #define FLOW_PRINTTUPLE_NO_STD  // or define using the command line
/// #include <flow.h> \endcode
/// <para>This will cause statements like the above to be a compile error unless the operator is defined elsewhere inside of the <c>std</c>
/// namespace. If <c>FLOW_PRINTTUPLE_NO_STD</c> is defined, then <c>operator&lt;&lt;</c> is defined inside of the flow namespace instead.</para>
/// 

/// \page readme Readme
/// \tableofcontents
/// This page contains everything you'll need to know in order to start using the flow library.
/// \section compilers Compiler Support
/// <para>The flow library is known to work for g++4.9 and MSVC 14.0. Support for Clang is being worked toward.</para>
/// <para>The flow library requires compilation under the C++14 standard. For g++, this requires the `-std=c++14` flag. MSVC 14.0 automatically
/// compiles under the C++14 standard.</para>
/// <para>Flow performs best on MSVC in most cases. The library also performs well for built-in or smaller types in g++.</para>
/// \section install Installation
/// <para>The flow library is header-only, so there's nothing to build. Download a release from the [GitHub repository](https://github.com/twentylemon/flow)
/// and place the `include` directory where you want the flow library to live. Then, in your program, the <c>\#include</c> directive will be similar to
/// <c>\#include &lt;flow.h&gt;</c> depending on your preference regarding the include path.</para>
/// \subsection build Build a Sample Program
/// <para>The following program computes the sum of squares of the numbers 1 to 10, displaying each square and the sum to `std::cout`.</para>
/// \code{.cpp}#include <flow.h>
/// 
/// int main() { 
///     flow::closed_range(1, 10)
///         | flow::map([](int i) { return i * i; })
///         | flow::peek([](int i) { std::cout << "value = " << i << std::endl; })
///         | flow::sum().then([](auto& s) { std::cout << "total = " << *s << std::endl; });
///     return 0;
/// }\endcode
/// <para>Copy the above program into a file and try to compile and run it to verify the installation. The output of the program should be:</para>
/// \code{.cpp}value = 1
/// value = 4
/// value = 9
/// value = 16
/// value = 25
/// value = 36
/// value = 49
/// value = 64
/// value = 81
/// value = 100
/// total = 385\endcode
///
/// \section use Using the Library
/// <para>This section will go into detail about everything you need to know in order to use the library effectively.</para>
/// \subsection stream Understanding Streams
/// <para>What is a stream? You can think of a stream as a single pass sequence of elements which you can manipulate or process in some way.
/// It's sort of like a container that doesn't own its elements -- stream elements in flow will typically be references to elements in an
/// actual container, or be generated temporary variables. Streams don't <em>store</em> elements, the elements are instead <em>computed</em>
/// once they are needed.</para>
/// <para>Streams are <em>single-pass</em> -- this means they can only be iterated through once. Iterating through a stream will be referred to as
/// <em>using</em> the stream, and an iterated through stream will be referred to as <em>used</em>. Using a stream that has already been
/// used will lead to undefined behavior. <span style="font-size:0.8em">[Typically, it produces an empty stream, but this behavior
/// is not guaranteed.]</span></para>
/// <para>Streams allow for <em>pipelining</em> of operations in a simple syntax. Many stream operations create new streams, which
/// allows multiple operations to be chained to form a pipeline. Other operations will iterate through the stream implicitly to
/// calculate some result. In the \ref build example, we can see a stream pipeline. This example shows a very simple use case,
/// calculating the sum of the squares of the numbers 1 to 10. Contrary to vanilla code, the first operation that takes
/// place, sum(), requests a value. It asks if the operation before it in the pipeline, peek(), has another element. peek() gets
/// this request, but is not a stream source, so it asks the previous thing in the pipeline the same question. map() defers back again,
/// and finally, closed_range(), the source of the stream, can say "Yes! Have a 1." That 1 is passed up the pipeline to map(), which squares
/// the 1 into 1, peek() displays the (squared) 1 before forwarding it to sum() who can finally use the value. Current sum is 1, hurray!
/// This process is then repeated -- sum() requests another value; it is piped up to closed_range() which gives 2 this time; map() makes it 4; peek()
/// displays it; sum() tallies it and requests another. Eventually, closed_range() will not have any more elements to give so the stream iteration
/// stops and the sum is returned.</para>
/// <para>Naturally, more complex pipelines can be created. We can slightly modify the above example to calculate the sum of the <em>even</em>
/// numbers from 1 to 10. The following code will calculate and display that sum.</para>
/// \code{.cpp}flow::closed_range(1, 10)
///     | flow::filter([](int i) { return i % 2 == 0; })
///     | flow::map([](int i) { return i * i; })
///     | flow::sum().then([](auto& s) { std::cout << "total = " << *s << std::endl; });\endcode
/// <para>Here, we added filter() to the mix, which only keeps stream elements that return <c>true</c> for the predicate -- even values, in this case.
/// In this example, the process follows the same flow: sum() requests an element from map(), map() in turn requests from filter(), filter() requests
/// from closed_range() which gives a value: 1. Here is where it is different: the 1 is passed to filter(), but filter() does not accept odd values, so
/// it is rejected and the pipeline stops; a new value is immediately requested. closed_range() doesn't mind, it gives the next value: 2 to filter();
/// filter() accepts and passes it to map(), map() squares it and passes 4 to sum() which finally uses the <em>first</em> value. Current sum is 4, hurray!</para>
/// <para>You can watch the pipeline work with some print statements. Try the following code for yourself:</para>
/// \code{.cpp}flow::closed_range(1, 5) // note: 1 to 5
///     | flow::filter([](int i) { std::cout << "filter: " << i << std::endl; return i % 2 == 0; })
///     | flow::map([](int i) { std::cout << "map: " << i << std::endl; return i * i; })
///     | flow::sum().then([](auto& s) { std::cout << "total = " << *s << std::endl; });\endcode
/// <para>It is the same as above, except both filter() and map() display to `std::cout` when they are doing work. This code will display the following.</para>
/// \code{.cpp}filter: 1
/// filter: 2
/// map: 2
/// filter: 3
/// filter: 4
/// map: 4
/// filter: 5
/// total = 20\endcode
///
/// \subsection generator Stream Generators
/// <para>Creating a stream is simple using the factory methods provided in the flow::generator namespace. The most common method is
/// to create a stream over a container using from(). Since it's so common, the <c>operator|</c> is overloaded for container types
/// with stream operations, so the following two lines produce the same result.</para>
/// \code{.cpp}std::vector<int> vec = { ... };
/// int s1 = flow::from(vec) | flow::sum(0);
/// int s2 = vec | flow::sum(0);
/// assert(s1 == s2);\endcode
/// <para>Other common generators include iota() and range(), which count up from a value, or repeat(), which repeats a value.
/// These generators actually produce <em>infinite</em> streams, more information about these is available in the \ref infinite section.</para>
///
/// \subsection operations Stream Operations
/// <para>We've seen some examples and understand the flow behind the scenes, but we haven't explained what the stream operations are,
/// what they are doing, and what <c>operator|</c> is doing precisely.</para>
/// <para>Stream operations can be broken down into two main types: intermediate and terminal. Intermediate operations transform the stream
/// somehow (map() or filter()), while terminal operations iterate through the stream and use the values somehow (sum()).</para>
/// \subsubsection intermediate Intermediate Operations
/// <para>Intermediate operations somehow transform a stream into a new one. Just above, we used filter() to transform the stream created by <c>closed_range(1, 5)</c>
/// into a stream only containing the even values in the range; the stream was transformed again using map(). Intermediate operations
/// do not use the stream in any way, they simply change the way the stream behaves once it is used.</para>
/// <para>Intermediate operations are further divided into <em>stateless</em> and <em>stateful</em> operations. Most operations are stateless, such as
/// filter() and map(). Stateless operations don't care about the state of the stream as a whole and thus only require <c>O(1)</c> space and time.
/// Stateful operations, such as sort(), need to know about the entire stream. They accomplish this by copying the stream into a <c>std::vector</c>.
/// These are especially expensive operations and generally should be avoided when performance is a concern. Stateful operations require an additional
/// <c>O(n)</c> space and at least <c>O(n)</c> time, where <c>n</c> is the size of the stream.</para>
/// <para>Intermediate operations are all contained in the flow::intermediate namespace.</para>
/// \subsubsection terminal Terminal Operations
/// <para>Terminal operations use the streams they are applied to in order to produce a result or a side effect. Above, we used sum()
/// to add all the elements, and dump() to write them all into a file.</para>
/// <para>Terminal operations built into the flow library contain several shorthand methods which allow you to directly use the value returned
/// by the terminal in another function. In the example in \ref build, we used <c>then()</c> to immediate display the sum. There are also methods
/// to directly access the value inside a \ref flow::optional object, which are returned by several of the terminal operations in the library.
/// These methods are described below. More information is available on the flow::terminal namespace page, and examples in \ref terminal.cpp.</para>
/// \code{.cpp}// call "value" the normal return value of *this terminal
/// .then(F f);         // return `f(value)`
/// // the following should only be used if `value` is an instance of flow::optional
/// .value();           // return `*value` without error checking
/// .value_or(T v);     // return `value.value_or(v)`; `*value` if it exists, `v` otherwise
/// .if_then(F f, G g = [](){});    // return `f(*value)` if value exists, otherwise return `g()`\endcode
/// <para>Terminal operations are all contained in the flow::terminal namespace.</para>
/// \subsubsection pipe The Pipe Operator
/// <para>All stream operations are <em>lazy</em>, meaning the operation itself does not do any work. The operation only does work once it
/// is <em>applied</em> to a stream using <c>operator|</c>. In short, <c>operator|</c> is the thing that tells the operations to operate.</para>
/// <para>The <c>operator|</c> is also overloaded between operations so you can compose your own and create new ones. For example, say
/// you use the "keeps evens and square" intermediate operation frequently. You can store this operation in a variable or create a function
/// that returns this operation.</para>
/// \code{.cpp}auto even_squares = flow::filter([](int i) { return i % 2 == 0; }) | flow::map([](int i) { return i * i; });
/// auto write_out = flow::peek([](int i) { std::cerr << "writing " << i << " to file" << std::endl; }) | flow::dump(output_file, "\n");
/// flow::closed_range(1, 10)
///     | even_squares
///     | write_out;
/// \endcode
/// <para>The type of operation you create is the same type as the last operation you compose. The <c>even_squares</c> operation above is an
/// intermediate operation because map() is an intermediate operation. The <c>write_out</c> operation is a terminal operation because dump()
/// is a terminal operation.</para>
///
/// \subsection infinite Infinite Streams
/// <para>Since streams are lazily evaluated, they can represent an infinite series of elements. A simple example of this is the iota() generator,
/// which counts up from a value. You can use infinite streams in the same manner as you would finite streams, but be aware of when you use
/// infinite streams, you must somehow stop the stream evaluation.</para>
/// \code{.cpp}int infinity = flow::iota(1) | flow::last().value(); // this will never stop
/// std::vector<int> rands = flow::generate(std::rand) | flow::to_vector(); // also bad, but this will happily crash once memory allocation fails
/// rands = flow::generate(std::rand) | flow::limit(i_want_this_many) | flow::to_vector();  // good! explicitly limit the length
/// bool has_10 = flow::random_ints(1, 9) | flow::contains(10); // never stops; values between 1 and 9 never contains 10
/// has_10 = flow::random_ints(1, 10000) | flow::contains(10);  // *could* stop, but who knows when\endcode
/// <para>Also note that infinite streams are never totally used, so the following would be totally acceptable.</para>
/// \code{.cpp}auto randoms = flow::random_reals(0.0, 1.0);
/// std::vector<double> vec = randoms | flow::limit(1000) | flow::to_vector();  // store 1,000 of them
/// double val = randoms | flow::limit(100000) | flow::sum().value();           // sum 100,000 of them; randoms is not totally used\endcode
/// 
/// \subsection iteration Custom Iteration
/// <para>If none of the provided intermediate or terminal operations do exactly what you need them to do, you can always iterate
/// through a stream yourself in the same manner as you would any container. Acquire the stream you want, then use the methods
/// <c>begin()</c> and <c>end()</c> to access the stream iterators, or use the range-based for loop. Remember though, once a stream is
/// used, it cannot be used again.</para>
/// \code{.cpp}auto stream = people
///     | flow::filter([](Person& p) { return p.sex() == Person::Sex::Male; })
///     | flow::map(&Person::age);
/// for (int age : stream) {
///     ...
/// }
/// // be careful! stream is used and cannot be used again.
/// auto ages = people | flow::map(&Person::age);
/// bool eq = std::equal(ages.begin(), ages.end(), other_thing.begin());
/// // ages may or may not be used entirely -- you should consider it used\endcode
/// <para>The stream iterators also work for infinite streams, technically. The past-the-end iterator will never be reached by incrementing. Ensure
/// you have some sort of stopping condition for infinite streams, same as you always would.</para>
/// \code{.cpp}auto counter = flow::iota(0);
/// bool eq = std::equal(vec.begin(), vec.end(), counter.begin());  // counter is stepped to vec.size() now\endcode
///
/// \section feedback Feedback
/// <para>Let me know of any bugs, performance issues or possible additions to the library by opening an issue on the
/// [GitHub repository](https://github.com/twentylemon/flow). If you like the project, let me know by staring or forking!</para>
///
